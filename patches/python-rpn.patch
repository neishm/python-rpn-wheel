diff --git a/DESCRIPTION b/DESCRIPTION
index 4bc31c6..11993b5 100644
--- a/DESCRIPTION
+++ b/DESCRIPTION
@@ -1 +1 @@
-RPN Python tools and interface to RPN libraries https://wiki.cmc.ec.gc.ca/wiki/Python-RPN
\ No newline at end of file
+RPN Python tools and interface to RPN libraries https://github.com/meteokid/python-rpn
diff --git a/VERSION b/VERSION
index 04bcabb..67ddfd3 100644
--- a/VERSION
+++ b/VERSION
@@ -1 +1 @@
-x/2.1-u1.rc11
+x/2.1-rc11
diff --git a/lib/__init__.py b/lib/__init__.py
new file mode 100644
index 0000000..ef7efd8
--- /dev/null
+++ b/lib/__init__.py
@@ -0,0 +1,2 @@
+import os, sys
+sys.path.append(os.path.dirname(__file__))
diff --git a/lib/rpnpy/burpc/__init__.py b/lib/rpnpy/burpc/__init__.py
index ffdc484..85298db 100755
--- a/lib/rpnpy/burpc/__init__.py
+++ b/lib/rpnpy/burpc/__init__.py
@@ -85,22 +85,39 @@ def load_burpc_lib(burpc_version=None):
     """
     import os
     import ctypes as ct
+    # Load librmn shared library here, to resolve symbols when running on MacOSX.
+    from rpnpy import librmn
     ## import numpy  as np
     ## import numpy.ctypeslib as npct
+    curdir = os.path.realpath(os.getcwd())
+    # Determine shared library suffix
+    try:
+      from rpnpy._sharedlibs import sharedlib_suffix as suffix
+      # Look for embedded shared libraries.
+      sharedlibs = os.path.join(os.path.dirname(__file__),os.pardir,'_sharedlibs')
+      os.chdir(sharedlibs)
+      # For Python >= 3.8 on Windows, need to add the library path
+      try:
+        os.add_dll_directory(sharedlibs)
+      except AttributeError:
+        pass
+    except ImportError:
+      suffix = 'so'
 
     if burpc_version is None:
         BURPC_VERSION = os.getenv('RPNPY_BURPC_VERSION',
                                   BURPC_VERSION_DEFAULT).strip()
     else:
         BURPC_VERSION = burpc_version
-    burpc_libfile = 'libburp_c_shared' + BURPC_VERSION.strip() + '.so'
+    burpc_libfile = 'libburp_c_shared' + BURPC_VERSION.strip() + '.' + suffix
 
+    localpath   = [os.path.realpath(os.getcwd())]
     pylibpath = os.getenv('PYTHONPATH', '').split(':')
     ldlibpath = os.getenv('LD_LIBRARY_PATH', '').split(':')
     eclibpath = os.getenv('EC_LD_LIBRARY_PATH', '').split()
     BURPC_LIBPATH = check_burpc_libpath(burpc_libfile)
     if not BURPC_LIBPATH:
-        for path in pylibpath + ldlibpath + eclibpath:
+        for path in localpath + pylibpath + ldlibpath + eclibpath:
             BURPC_LIBPATH = check_burpc_libpath(os.path.join(path.strip(),
                                                            burpc_libfile))
             if BURPC_LIBPATH:
@@ -117,6 +134,7 @@ def load_burpc_lib(burpc_version=None):
     except IOError:
         raise IOError('ERROR: cannot load libburp_c shared version: ' +
                       BURPC_VERSION)
+    os.chdir(curdir)
     return (BURPC_VERSION, BURPC_LIBPATH, libburpc)
 
 (BURPC_VERSION, BURPC_LIBPATH, libburpc) = load_burpc_lib()
diff --git a/lib/rpnpy/librmn/__init__.py b/lib/rpnpy/librmn/__init__.py
index 6255e40..eb3aa42 100755
--- a/lib/rpnpy/librmn/__init__.py
+++ b/lib/rpnpy/librmn/__init__.py
@@ -74,20 +74,35 @@ def loadRMNlib(rmn_version=None):
     import ctypes as ct
     ## import numpy  as np
     ## import numpy.ctypeslib as npct
+    curdir = os.path.realpath(os.getcwd())
+    # Determine shared library suffix
+    try:
+      from rpnpy._sharedlibs import sharedlib_suffix as suffix
+      # Look for embedded shared libraries.
+      sharedlibs = os.path.join(os.path.dirname(__file__),os.pardir,'_sharedlibs')
+      os.chdir(sharedlibs)
+      # For Python >= 3.8 on Windows, need to add the library path
+      try:
+        os.add_dll_directory(sharedlibs)
+      except AttributeError:
+        pass
+    except ImportError:
+      suffix = 'so'
 
     if rmn_version is None:
         RMN_VERSION = os.getenv('RPNPY_RMN_VERSION',
                                 RMN_VERSION_DEFAULT).strip()
     else:
         RMN_VERSION = rmn_version
-    rmn_libfile = 'librmnshared' + RMN_VERSION.strip() + '.so'
+    rmn_libfile = 'librmnshared' + RMN_VERSION.strip() + '.' + suffix
 
+    localpath   = [os.path.realpath(os.getcwd())]
     pylibpath   = os.getenv('PYTHONPATH','').split(':')
     ldlibpath   = os.getenv('LD_LIBRARY_PATH','').split(':')
     eclibpath   = os.getenv('EC_LD_LIBRARY_PATH','').split()
     RMN_LIBPATH = checkRMNlibPath(rmn_libfile)
     if not RMN_LIBPATH:
-        for path in pylibpath + ldlibpath + eclibpath:
+        for path in localpath + pylibpath + ldlibpath + eclibpath:
             RMN_LIBPATH = checkRMNlibPath(os.path.join(path.strip(), rmn_libfile))
             if RMN_LIBPATH:
                 break
@@ -95,6 +110,7 @@ def loadRMNlib(rmn_version=None):
     if not RMN_LIBPATH:
         raise IOError(-1, 'Failed to find librmn.so: ', rmn_libfile)
 
+    RMN_LIBPATH = os.path.abspath(RMN_LIBPATH)
     librmn = None
     try:
         librmn = ct.cdll.LoadLibrary(RMN_LIBPATH)
@@ -102,6 +118,7 @@ def loadRMNlib(rmn_version=None):
     except IOError as e:
         raise IOError('ERROR: cannot load librmn shared version: ' +
                       RMN_VERSION, e)
+    os.chdir(curdir)
     return (RMN_VERSION, RMN_LIBPATH, librmn)
 
 (RMN_VERSION, RMN_LIBPATH, librmn) = loadRMNlib()
diff --git a/lib/rpnpy/librmn/fstd98.py b/lib/rpnpy/librmn/fstd98.py
index 582be66..a7fa447 100755
--- a/lib/rpnpy/librmn/fstd98.py
+++ b/lib/rpnpy/librmn/fstd98.py
@@ -159,7 +159,7 @@ def dtype_numpy2fst(npdtype, compress=True, missing=False):
        rpnpy.librmn.const
        FSTDError
     """
-    if not (type(npdtype) == _np.dtype or type(npdtype) == type):
+    if not (isinstance(npdtype, _np.dtype) or isinstance(npdtype, type)):
         raise TypeError("dtype_numpy2fst: Expecting arg of type {0}, Got {1}"\
                         .format('numpy.dtype', type(npdtype)))
     datyp = 0 #default returned type: binary
diff --git a/lib/rpnpy/vgd/__init__.py b/lib/rpnpy/vgd/__init__.py
index c3af15a..107513c 100755
--- a/lib/rpnpy/vgd/__init__.py
+++ b/lib/rpnpy/vgd/__init__.py
@@ -75,22 +75,39 @@ def loadVGDlib(vgd_version=None):
     """
     import os
     import ctypes as ct
+    # Load librmn shared library here, to resolve symbols when running on MacOSX.
+    from rpnpy import librmn
     ## import numpy  as np
     ## import numpy.ctypeslib as npct
+    curdir = os.path.realpath(os.getcwd())
+    # Determine shared library suffix
+    try:
+      from rpnpy._sharedlibs import sharedlib_suffix as suffix
+      # Look for embedded shared libraries.
+      sharedlibs = os.path.join(os.path.dirname(__file__),os.pardir,'_sharedlibs')
+      os.chdir(sharedlibs)
+      # For Python >= 3.8 on Windows, need to add the library path
+      try:
+        os.add_dll_directory(sharedlibs)
+      except AttributeError:
+        pass
+    except ImportError:
+      suffix = 'so'
 
     if vgd_version is None:
         VGD_VERSION = os.getenv('RPNPY_VGD_VERSION',
                                 VGD_VERSION_DEFAULT).strip()
     else:
         VGD_VERSION = vgd_version
-    vgd_libfile = 'libvgridshared' + VGD_VERSION.strip() + '.so'
+    vgd_libfile = 'libvgridshared' + VGD_VERSION.strip() + '.' + suffix
 
+    localpath   = [os.path.realpath(os.getcwd())]
     pylibpath   = os.getenv('PYTHONPATH','').split(':')
     ldlibpath   = os.getenv('LD_LIBRARY_PATH','').split(':')
     eclibpath   = os.getenv('EC_LD_LIBRARY_PATH','').split()
     VGD_LIBPATH = checkVGDlibPath(vgd_libfile)
     if not VGD_LIBPATH:
-        for path in pylibpath + ldlibpath + eclibpath:
+        for path in localpath + pylibpath + ldlibpath + eclibpath:
             VGD_LIBPATH = checkVGDlibPath(os.path.join(path.strip(), vgd_libfile))
             if VGD_LIBPATH:
                 break
@@ -106,6 +123,8 @@ def loadVGDlib(vgd_version=None):
     except IOError:
         raise IOError('ERROR: cannot load libvgrid shared version: ' +
                       VGD_VERSION)
+
+    os.chdir(curdir)
     return (VGD_VERSION, VGD_LIBPATH, libvgd)
 
 (VGD_VERSION, VGD_LIBPATH, libvgd) = loadVGDlib()
